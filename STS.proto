option java_package = "org.lsfn.common";
option java_outer_classname = "STS";
package lsfn;

message STSup {
    message RCon {
        optional string command = 1;
    }

    message JoinRequest {
        enum JoinType {
            JOIN = 0;
            REJOIN = 1;
        }
        
        required JoinType type = 1;
        optional string rejoinToken = 2;
    }

    message Connection {
        enum ConnectionCommand {
            CONNECT = 0;
            DISCONNECT = 1;
        }
        
        optional ConnectionCommand connectionCommand = 1;
        optional string host = 2;
        optional uint32 port = 3;
    }

    message Lobby {
        optional bool readyState = 1;
        optional string shipName = 2;
    }

    message Subscribe {
        required string nodeName = 1;
        repeated Subscribe children = 2;
    }
    
    message Reactor {
        optional double reactantIntroduction = 1;
        optional double coolantIntroduction = 2;
    }

    message PowerDistribution {
        optional bool leftEngine = 1;
        optional bool rightEngine = 2;
        optional bool forwardLeftThruster = 3;
        optional bool forwardRightThruster = 4;
        optional bool rearLeftThruster = 5;
        optional bool rearRightThruster = 6;
    }

    message Engines {
        optional double leftEngineThrottle = 1;
        optional double rightEngineThrottle = 2;
    }

    message Thrusters {
        optional double forwardLeft = 1;
        optional double forwardRight = 2;
        optional double rearLeft = 3;
        optional double rearRight = 4;
    }

    optional RCon rcon = 1;
    optional JoinRequest joinRequest = 2;
    optional Connection connection = 3;
    optional Lobby lobby = 4;
    optional Subscribe subscribe = 5;
    optional Reactor reactor = 6;
    optional PowerDistribution powerDistribution = 7;
    optional Engines engines = 8;
    optional Thrusters thrusters = 9;
}

message STSdown {
    message JoinInfo {
        required bool allowJoin = 1;
        required string gameIDtoken = 2;
    }

    message JoinResponse {
        enum Type {
            JOIN_ACCEPTED = 0;
            REJOIN_ACCEPTED = 1;
            JOIN_REJECTED = 2;
        }

        required Type type = 1;
        optional string rejoinToken = 2;
    }
        
    message Connection {
        optional bool connected = 1;
    }

    message Lobby {
       optional bool readyState = 1;
       optional string shipName = 2;
       repeated string shipsInGame = 3;
       optional bool gameStarted = 4;
    }
    
    message VisualSensors {
        message SpaceObject {
            enum Type {
                SHIP = 0;
                ASTEROID = 1;         
            }
        
            message Point {
                optional double x = 1;
                optional double y = 2;
            }
            
            optional Type type = 1;
            optional Point position = 2;
            // orientation is in radians
            optional double orientation = 3; 
        }
        
        repeated SpaceObject spaceObjects = 1;
    }
    
    message Reactor {
        optional double reactantIntroduction = 1;
        optional double coolantIntroduction = 2;
        optional double powerOutput = 3;
        optional double heatLevel = 4;
    }

    message PowerDistribution {
        optional bool leftEngine = 1;
        optional bool rightEngine = 2;
        optional bool forwardLeftThruster = 3;
        optional bool forwardRightThruster = 4;
        optional bool rearLeftThruster = 5;
        optional bool rearRightThruster = 6;
    }

    message Engines {
        optional double leftEngineThrottle = 1;
        optional double rightEngineThrottle = 2;
    }

    message Thrusters {
        optional double forwardLeft = 1;
        optional double forwardRight = 2;
        optional double rearLeft = 3;
        optional double rearRight = 4;
    }

    optional Connection connection = 1;
    optional JoinInfo joinInfo = 2;
    optional JoinResponse joinResponse = 3;
    optional Lobby lobby = 4;
    optional VisualSensors visualSensors = 5;
    optional Reactor reactor = 6;
    optional PowerDistribution powerDistribution = 7;
    optional Engines engines = 8;
    optional Thrusters thrusters = 9;
}
